[
    { "id": 1, "question": "Which MongoDB service is a fully managed multi-cloud database?", "options": [ { "label": "A", "text": "MongoDB Enterprise" }, { "label": "B", "text": "MongoDB Compass" }, { "label": "C", "text": "MongoDB Atlas" }, { "label": "D", "text": "MongoDB Shell" } ], "answer": "C", "explanation": { "en": "MongoDB Atlas is the fully managed multi-cloud database service.", "vi": "MongoDB Atlas là dịch vụ cơ sở dữ liệu đa đám mây được quản lý hoàn toàn." } },
    { "id": 2, "question": "What command starts the MongoDB server daemon?", "options": [ { "label": "A", "text": "mongo" }, { "label": "B", "text": "mongod" }, { "label": "C", "text": "mongos" }, { "label": "D", "text": "mongoimport" } ], "answer": "B", "explanation": { "en": "`mongod` starts the MongoDB server process.", "vi": "`mongod` khởi chạy tiến trình máy chủ MongoDB." } },
    { "id": 3, "question": "Which tool provides a GUI for MongoDB?", "options": [ { "label": "A", "text": "mongo shell" }, { "label": "B", "text": "mongostat" }, { "label": "C", "text": "MongoDB Compass" }, { "label": "D", "text": "mongorestore" } ], "answer": "C", "explanation": { "en": "MongoDB Compass is the official GUI for MongoDB.", "vi": "MongoDB Compass là công cụ giao diện đồ họa chính thức." } },
    { "id": 4, "question": "What format does MongoDB use to store documents?", "options": [ { "label": "A", "text": "XML" }, { "label": "B", "text": "JSON" }, { "label": "C", "text": "BSON" }, { "label": "D", "text": "YAML" } ], "answer": "C", "explanation": { "en": "MongoDB uses BSON (binary JSON) internally.", "vi": "MongoDB lưu trữ dưới dạng BSON (JSON nhị phân)." } },
    { "id": 5, "question": "Which command switches to or creates a database?", "options": [ { "label": "A", "text": "use <dbname>" }, { "label": "B", "text": "db.create()" }, { "label": "C", "text": "mongo <dbname>" }, { "label": "D", "text": "createDB()" } ], "answer": "A", "explanation": { "en": "`use <dbname>` switches to or creates the database in the shell.", "vi": "`use <dbname>` chuyển sang hoặc tạo cơ sở dữ liệu trong shell." } },
    { "id": 6, "question": "What is a collection in MongoDB?", "options": [ { "label": "A", "text": "A table in SQL" }, { "label": "B", "text": "A grouping of documents" }, { "label": "C", "text": "A single document" }, { "label": "D", "text": "An index" } ], "answer": "B", "explanation": { "en": "A collection is a group of MongoDB documents, similar to a table in relational databases.", "vi": "Collection là tập hợp các document trong MongoDB, tương tự bảng trong cơ sở dữ liệu quan hệ." } },
    { "id": 7, "question": "In MongoDB, which command inserts one document?", "options": [ { "label": "A", "text": "db.coll.insertMany()" }, { "label": "B", "text": "db.coll.insertOne()" }, { "label": "C", "text": "db.coll.save()" }, { "label": "D", "text": "db.coll.add()" } ], "answer": "B", "explanation": { "en": "`insertOne()` inserts a single document into the collection.", "vi": "`insertOne()` chèn một document vào collection." } },
    { "id": 8, "question": "Which MongoDB index type is optimized for high-cardinality values?", "options": [ { "label": "A", "text": "Hashed index" }, { "label": "B", "text": "Text index" }, { "label": "C", "text": "2dsphere index" }, { "label": "D", "text": "Wildcard index" } ], "answer": "A", "explanation": { "en": "Hashed indexes distribute keys across the hash space, optimizing equality queries on high-cardinality fields.", "vi": "Hashed index phân phối giá trị theo không gian băm, tối ưu truy vấn so sánh cho trường có độ đa dạng cao." } },
    { "id": 9, "question": "Which Atlas feature provides full-text search capabilities?", "options": [ { "label": "A", "text": "Atlas Search" }, { "label": "B", "text": "Atlas Data Lake" }, { "label": "C", "text": "Atlas Charts" }, { "label": "D", "text": "Atlas Triggers" } ], "answer": "A", "explanation": { "en": "Atlas Search integrates Lucene-based full-text search functionality into Atlas clusters.", "vi": "Atlas Search tích hợp chức năng tìm kiếm văn bản dựa trên Lucene vào cụm Atlas." } },
    { "id": 10, "question": "Which stage in Aggregation framework processes documents by grouping them?", "options": [ { "label": "A", "text": "$sort" }, { "label": "B", "text": "$match" }, { "label": "C", "text": "$group" }, { "label": "D", "text": "$project" } ], "answer": "C", "explanation": { "en": "The `$group` stage groups documents by a specified _id expression.", "vi": "Giai đoạn `$group` nhóm các tài liệu theo biểu thức _id đã chỉ định." } },
    { "id": 11, "question": "What operator filters in `$match` stage?", "options": [ { "label": "A", "text": "$eq" }, { "label": "B", "text": "$ne" }, { "label": "C", "text": "$gte" }, { "label": "D", "text": "All mentioned" } ], "answer": "D", "explanation": { "en": "Operators like `$eq`, `$ne`, `$gte`, `$lte` can be used inside `$match`.", "vi": "Các toán tử `$eq`, `$ne`, `$gte`, `$lte` đều có thể dùng trong `$match`." } },
    { "id": 12, "question": "Which Python method performs Aggregation pipeline?", "options": [ { "label": "A", "text": "collection.aggregate()" }, { "label": "B", "text": "collection.map_reduce()" }, { "label": "C", "text": "collection.find()" }, { "label": "D", "text": "collection.run()" } ], "answer": "A", "explanation": { "en": "Use `collection.aggregate()` in PyMongo to run aggregation pipelines.", "vi": "Dùng `collection.aggregate()` trong PyMongo để chạy pipeline tổng hợp." } },
    { "id": 13, "question": "Which index improves performance for range queries?", "options": [ { "label": "A", "text": "Hashed index" }, { "label": "B", "text": "Compound index" }, { "label": "C", "text": "TTL index" }, { "label": "D", "text": "Text index" } ], "answer": "B", "explanation": { "en": "Compound indexes support range queries on prefix fields efficiently.", "vi": "Compound index hỗ trợ hiệu quả cho truy vấn phạm vi trên các trường tiền tố." } },
    { "id": 14, "question": "What is TTL index used for?", "options": [ { "label": "A", "text": "Full-text search" }, { "label": "B", "text": "Automatic expire documents" }, { "label": "C", "text": "Geospatial queries" }, { "label": "D", "text": "Sharding" } ], "answer": "B", "explanation": { "en": "TTL (Time To Live) indexes automatically remove documents after a specified time.", "vi": "TTL index tự động xóa tài liệu sau khoảng thời gian đã định." } },
    { "id": 15, "question": "Which command shows real-time throughput of MongoDB?", "options": [ { "label": "A", "text": "mongotop" }, { "label": "B", "text": "mongostat" }, { "label": "C", "text": "mongo stats" }, { "label": "D", "text": "db.serverStatus()" } ], "answer": "B", "explanation": { "en": "`mongostat` provides real-time server statistics every second.", "vi": "`mongostat` cung cấp thống kê máy chủ theo thời gian thực mỗi giây." } },
    { "id": 16, "question": "Which method do you use to connect using Python driver?", "options": [ { "label": "A", "text": "pymongo.connect()" }, { "label": "B", "text": "MongoClient()" }, { "label": "C", "text": "connect_to_mongo()" }, { "label": "D", "text": "client.connect()" } ], "answer": "B", "explanation": { "en": "Instantiate `MongoClient()` to connect to a MongoDB deployment.", "vi": "Khởi tạo `MongoClient()` để kết nối đến MongoDB." } },
    { "id": 17, "question": "Which parameter in connection string specifies authentication database?", "options": [ { "label": "A", "text": "authSource" }, { "label": "B", "text": "authDB" }, { "label": "C", "text": "database" }, { "label": "D", "text": "auth" } ], "answer": "A", "explanation": { "en": "Use `authSource` to specify the database that stores user credentials.", "vi": "Dùng `authSource` để xác định cơ sở dữ liệu lưu thông tin xác thực." } },
    { "id": 18, "question": "Which method inserts multiple documents in PyMongo?", "options": [ { "label": "A", "text": "insert()" }, { "label": "B", "text": "insert_many()" }, { "label": "C", "text": "add_many()" }, { "label": "D", "text": "bulk_insert()" } ], "answer": "B", "explanation": { "en": "`insert_many()` inserts an array of documents in one operation.", "vi": "`insert_many()` chèn một mảng tài liệu trong một thao tác." } },
    { "id": 19, "question": "Which operator adds elements to an array field?", "options": [ { "label": "A", "text": "$push" }, { "label": "B", "text": "$addToSet" }, { "label": "C", "text": "$pop" }, { "label": "D", "text": "$pull" } ], "answer": "A", "explanation": { "en": "`$push` appends values to an array field.", "vi": "`$push` thêm giá trị vào trường mảng." } },
    { "id": 20, "question": "Which operator removes elements from an array field?", "options": [ { "label": "A", "text": "$pop" }, { "label": "B", "text": "$pull" }, { "label": "C", "text": "$pullAll" }, { "label": "D", "text": "All above" } ], "answer": "D", "explanation": { "en": "Operators like `$pop`, `$pull`, `$pullAll` can remove array elements.", "vi": "Các toán tử `$pop`, `$pull`, `$pullAll` đều có thể xóa phần tử mảng." } },
    { "id": 21, "question": "Which method counts documents matching a filter?", "options": [ { "label": "A", "text": "count()" }, { "label": "B", "text": "countDocuments()" }, { "label": "C", "text": "estimatedDocumentCount()" }, { "label": "D", "text": "All above" } ], "answer": "D", "explanation": { "en": "`count()`, `countDocuments()`, `estimatedDocumentCount()` all provide count metrics.", "vi": "`count()`, `countDocuments()`, `estimatedDocumentCount()` đều trả về số liệu đếm." } },
    { "id": 22, "question": "What is the default write concern for MongoDB operations?", "options": [ { "label": "A", "text": "w:0" }, { "label": "B", "text": "w:1" }, { "label": "C", "text": "w:majority" }, { "label": "D", "text": "w:all" } ], "answer": "B", "explanation": { "en": "Default write concern is w:1 (acknowledgement from primary only).", "vi": "Write concern mặc định là w:1 (primary xác nhận)." } },
    { "id": 23, "question": "Which Python method starts a client session for transactions?", "options": [ { "label": "A", "text": "client.start_session()" }, { "label": "B", "text": "client.begin_transaction()" }, { "label": "C", "text": "client.start_transaction()" }, { "label": "D", "text": "client.new_session()" } ], "answer": "A", "explanation": { "en": "Use `client.start_session()` to obtain a session object.", "vi": "Dùng `client.start_session()` để lấy đối tượng phiên." } },
    { "id": 24, "question": "Which method commits a transaction in PyMongo?", "options": [ { "label": "A", "text": "session.commitTransaction()" }, { "label": "B", "text": "session.commit()" }, { "label": "C", "text": "client.commit()" }, { "label": "D", "text": "transaction.commit()" } ], "answer": "A", "explanation": { "en": "`session.commitTransaction()` commits the multi-document transaction.", "vi": "`session.commitTransaction()` cam kết giao dịch đa tài liệu." } },
    { "id": 25, "question": "What method aborts an ongoing transaction?", "options": [ { "label": "A", "text": "session.abort()" }, { "label": "B", "text": "session.abortTransaction()" }, { "label": "C", "text": "client.abort()" }, { "label": "D", "text": "transaction.abort()" } ], "answer": "B", "explanation": { "en": "Use `session.abortTransaction()` to abort.", "vi": "Dùng `session.abortTransaction()` để hủy giao dịch." } },
    { "id": 26, "question": "Which collection-level view allows read-only access?", "options": [ { "label": "A", "text": "View" }, { "label": "B", "text": "Snapshot" }, { "label": "C", "text": "Cursor" }, { "label": "D", "text": "Change Stream" } ], "answer": "A", "explanation": { "en": "Views are read-only “”virtual”” collections.", "vi": "Views là các bộ sưu tập ảo chỉ đọc." } },
    { "id": 27, "question": "Which change stream option resumes after interruption?", "options": [ { "label": "A", "text": "resumeAfter" }, { "label": "B", "text": "startAfter" }, { "label": "C", "text": "fullDocument" }, { "label": "D", "text": "startAtOperationTime" } ], "answer": "A", "explanation": { "en": "The `resumeAfter` option resumes the stream from a given token.", "vi": "Tùy chọn `resumeAfter` tiếp tục luồng từ dấu token chỉ định." } },
    { "id": 28, "question": "What is the default behavior for read preference?", "options": [ { "label": "A", "text": "primary" }, { "label": "B", "text": "primaryPreferred" }, { "label": "C", "text": "secondary" }, { "label": "D", "text": "secondaryPreferred" } ], "answer": "A", "explanation": { "en": "Default read preference is ‘primary’, reading from primary node.", "vi": "Read preference mặc định là ‘primary’, đọc từ primary." } },
    { "id": 29, "question": "Which command creates a TTL index?", "options": [ { "label": "A", "text": "db.coll.createIndex({ field: 1 }, { expireAfterSeconds: N })" }, { "label": "B", "text": "db.coll.createTTL({...})" }, { "label": "C", "text": "db.coll.ttlIndex()" }, { "label": "D", "text": "db.coll.createIndex({ field: 1 }).expire(N)" } ], "answer": "A", "explanation": { "en": "Use `expireAfterSeconds` option in `createIndex()`.", "vi": "Dùng tùy chọn `expireAfterSeconds` trong `createIndex()`." } },
    { "id": 30, "question": "Which method updates multiple documents?", "options": [ { "label": "A", "text": "update_one()" }, { "label": "B", "text": "update_many()" }, { "label": "C", "text": "replace_many()" }, { "label": "D", "text": "bulk_write()" } ], "answer": "B", "explanation": { "en": "`update_many()` updates all matching documents.", "vi": "`update_many()` cập nhật tất cả tài liệu khớp." } },
    { "id": 31, "question": "Which command shows all collections in the current database?", "options": [ { "label": "A", "text": "show tables" }, { "label": "B", "text": "show collections" }, { "label": "C", "text": "db.show()" }, { "label": "D", "text": "db.list()" } ], "answer": "B", "explanation": { "en": "Use `show collections` in the shell.", "vi": "Dùng `show collections` trong shell." } },
    { "id": 32, "question": "Which method retrieves the first matching document?", "options": [ { "label": "A", "text": "find()" }, { "label": "B", "text": "find_one()" }, { "label": "C", "text": "get_one()" }, { "label": "D", "text": "first()" } ], "answer": "B", "explanation": { "en": "`find_one()` returns the first matching document.", "vi": "`find_one()` trả về document khớp đầu tiên." } },
    { "id": 33, "question": "Which option in aggregation writes output to a collection?", "options": [ { "label": "A", "text": "$out" }, { "label": "B", "text": "$merge" }, { "label": "C", "text": "$project" }, { "label": "D", "text": "$write" } ], "answer": "A", "explanation": { "en": "The `$out` stage writes results to a specified collection.", "vi": "Giai đoạn `$out` ghi kết quả ra collection chỉ định." } },
    { "id": 34, "question": "Which stage deconstructs an array field?", "options": [ { "label": "A", "text": "$unwind" }, { "label": "B", "text": "$group" }, { "label": "C", "text": "$lookup" }, { "label": "D", "text": "$project" } ], "answer": "A", "explanation": { "en": "`$unwind` deconstructs array fields to separate documents.", "vi": "`$unwind` tách mảng thành các document riêng biệt." } },
    { "id": 35, "question": "Which method creates a compound index?", "options": [ { "label": "A", "text": "createIndex({ a:1, b:-1 })" }, { "label": "B", "text": "createCompoundIndex(a,b)" }, { "label": "C", "text": "ensureIndex({ a:1, b:1 })" }, { "label": "D", "text": "addIndex(a,b)" } ], "answer": "A", "explanation": { "en": "Use `createIndex({ a:1, b:-1 })` to create compound index.", "vi": "Dùng `createIndex({ a:1, b:-1 })` để tạo compound index." } },
    { "id": 36, "question": "Which command shows index information for a collection?", "options": [ { "label": "A", "text": "db.coll.getIndexes()" }, { "label": "B", "text": "db.coll.indexInfo()" }, { "label": "C", "text": "db.coll.showIndexes()" }, { "label": "D", "text": "db.coll.listIndexes()" } ], "answer": "A", "explanation": { "en": "`getIndexes()` returns an array of index specs.", "vi": "`getIndexes()` trả về mảng đặc tả chỉ mục." } },
    { "id": 37, "question": "Which operator allows multi-document ACID transactions?", "options": [ { "label": "A", "text": "$transaction" }, { "label": "B", "text": "startSession()" }, { "label": "C", "text": "applyOps" }, { "label": "D", "text": "db.beginTransaction()" } ], "answer": "B", "explanation": { "en": "ACID transactions in MongoDB are started via `client.start_session()` and `session.start_transaction()`. ", "vi": "Transactions ACID được khởi chạy bằng `client.start_session()` và `session.start_transaction()`." } },
    { "id": 38, "question": "Which helper class simulates high-level transactions in Python?", "options": [ { "label": "A", "text": "TransactionManager" }, { "label": "B", "text": "ClientSession" }, { "label": "C", "text": "SessionHelper" }, { "label": "D", "text": "AtomicController" } ], "answer": "B", "explanation": { "en": "`ClientSession` manages multi-document transactions in PyMongo.", "vi": "`ClientSession` quản lý giao dịch đa tài liệu trong PyMongo." } },
    { "id": 39,
      "question": "Which PyMongo method lists available databases?",
      "options": [
        { "label": "A", "text": "client.list_database_names()" },
        { "label": "B", "text": "client.get_databases()" },
        { "label": "C", "text": "dbs()" },
        { "label": "D", "text": "show dbs" }
      ],
      "answer": "A",
      "explanation": {
        "en": "Use `client.list_database_names()` to get database names.",
        "vi": "Dùng `client.list_database_names()` để lấy tên cơ sở dữ liệu."
      }
    },
    { "id": 40, "question": "Which is the default read concern in MongoDB?", "options": [ { "label": "A", "text": "local" }, { "label": "B", "text": "majority" }, { "label": "C", "text": "linearizable" }, { "label": "D", "text": "available" } ], "answer": "A", "explanation": { "en": "The default read concern is `local`, which returns the node’s most recent data.", "vi": "Read concern mặc định là `local`, trả về dữ liệu mới nhất của node." } },
    { "id": 41, "question": "Which command backs up a database?", "options": [ { "label": "A", "text": "mongodump" }, { "label": "B", "text": "mongorestore" }, { "label": "C", "text": "mongoexport" }, { "label": "D", "text": "backupDB" } ], "answer": "A", "explanation": { "en": "`mongodump` creates a binary export of the database.", "vi": "`mongodump` tạo bản sao nhị phân của cơ sở dữ liệu." } },
    { "id": 42, "question": "Which command restores from a dump?", "options": [ { "label": "A", "text": "mongodump" }, { "label": "B", "text": "mongorestore" }, { "label": "C", "text": "mongoimport" }, { "label": "D", "text": "mongoexport" } ], "answer": "B", "explanation": { "en": "`mongorestore` restores data from a mongodump export.", "vi": "`mongorestore` khôi phục dữ liệu từ bản dump." } },
    { "id": 43, "question": "Which method exports collection to JSON?", "options": [ { "label": "A", "text": "mongoexport" }, { "label": "B", "text": "mongodump" }, { "label": "C", "text": "mongorestore" }, { "label": "D", "text": "mongoimport" } ], "answer": "A", "explanation": { "en": "`mongoexport` exports data to JSON or CSV formats.", "vi": "`mongoexport` xuất dữ liệu ra JSON hoặc CSV." } },
    { "id": 44, "question": "Which Python method bulk writes multiple operations?", "options": [ { "label": "A", "text": "collection.bulk_write()" }, { "label": "B", "text": "collection.insert_many()" }, { "label": "C", "text": "collection.multi_insert()" }, { "label": "D", "text": "collection.multi_update()" } ], "answer": "A", "explanation": { "en": "`bulk_write()` executes a list of write operations in bulk.", "vi": "`bulk_write()` thực thi danh sách thao tác ghi cùng lúc." } },
    { "id": 45, "question": "Which operator in aggregation allows merging results into a collection?", "options": [ { "label": "A", "text": "$out" }, { "label": "B", "text": "$merge" }, { "label": "C", "text": "$addFields" }, { "label": "D", "text": "$addToSet" } ], "answer": "B", "explanation": { "en": "`$merge` writes pipeline results into an existing or new collection.", "vi": "`$merge` ghi kết quả pipeline vào collection hiện có hoặc mới." } },
    { "id": 46, "question": "Which stage truncates array elements beyond threshold?", "options": [ { "label": "A", "text": "$slice" }, { "label": "B", "text": "$limitArray" }, { "label": "C", "text": "$unwind" }, { "label": "D", "text": "$project" } ], "answer": "A", "explanation": { "en": "`$slice` can project only a subset of an array in `$project` stage.", "vi": "`$slice` có thể chiếu một phần của mảng trong giai đoạn `$project`." } },
    { "id": 47,
      "question": "Which method in Python searches by text index?",
      "options": [
        { "label": "A", "text": "collection.find({ $text: { $search: 'term' } })" },
        { "label": "B", "text": "collection.text_search('term')" },
        { "label": "C", "text": "collection.search({ text: 'term' })" },
        { "label": "D", "text": "collection.search_text('term')" }
      ],
      "answer": "A",
      "explanation": {
        "en": "Use `$text` operator in find() for text search.",
        "vi": "Dùng toán tử `$text` trong find() để tìm kiếm văn bản."
      }
    },
    { "id": 48, "question": "Which aggregation stage performs a text search?", "options": [ { "label": "A", "text": "$lookup" }, { "label": "B", "text": "$search" }, { "label": "C", "text": "$match" }, { "label": "D", "text": "$text" } ], "answer": "B", "explanation": { "en": "The `$search` stage is used for Atlas Search text queries.", "vi": "Giai đoạn `$search` dùng cho truy vấn văn bản Atlas Search." } },
    { "id": 49, "question": "Which index type supports geospatial queries?", "options": [ { "label": "A", "text": "2dsphere" }, { "label": "B", "text": "2d" }, { "label": "C", "text": "geoHaystack" }, { "label": "D", "text": "All above" } ], "answer": "D", "explanation": { "en": "2dsphere, 2d, and geoHaystack indexes support different geospatial operations.", "vi": "Các index 2dsphere, 2d, geoHaystack hỗ trợ các thao tác không gian địa lý khác nhau." } },
    { "id": 50, "question": "Which Python method creates a geospatial index?", "options": [ { "label": "A", "text": "collection.create_index({ loc: '2dsphere' })" }, { "label": "B", "text": "collection.geo_index('loc')" }, { "label": "C", "text": "collection.create_geo_index('loc')" }, { "label": "D", "text": "collection.ensure_index({ loc: '2d' })" } ], "answer": "A", "explanation": { "en": "Use `create_index({ loc: '2dsphere'})` for spherical geo queries.", "vi": "Dùng `create_index({ loc: '2dsphere'})` cho truy vấn không gian trái đất." } },
    { "id": 51, "question": "Which cursor method applies skip?", "options": [ { "label": "A", "text": "skip(n)" }, { "label": "B", "text": "offset(n)" }, { "label": "C", "text": "jump(n)" }, { "label": "D", "text": "slice(n)" } ], "answer": "A", "explanation": { "en": "`skip(n)` skips the first n documents.", "vi": "`skip(n)` bỏ qua n tài liệu đầu tiên." } },
    { "id": 52, "question": "Which method counts documents without blocking?", "options": [ { "label": "A", "text": "count()" }, { "label": "B", "text": "estimatedDocumentCount()" }, { "label": "C", "text": "countDocuments()" }, { "label": "D", "text": "documentCount()" } ], "answer": "B", "explanation": { "en": "`estimatedDocumentCount()` uses metadata for fast count without filters.", "vi": "`estimatedDocumentCount()` sử dụng siêu dữ liệu để đếm nhanh mà không lọc." } },
    { "id": 53, "question": "Which sort order indicates descending?", "options": [ { "label": "A", "text": "1" }, { "label": "B", "text": "-1" }, { "label": "C", "text": "desc" }, { "label": "D", "text": "Dsc" } ], "answer": "B", "explanation": { "en": "In sort spec, -1 denotes descending order.", "vi": "Trong sort spec, -1 biểu thị giảm dần." } },
    { "id": 54, "question": "What is the default maximum document size in MongoDB?", "options": [ { "label": "A", "text": "4MB" }, { "label": "B", "text": "16MB" }, { "label": "C", "text": "64MB" }, { "label": "D", "text": "128MB" } ], "answer": "B", "explanation": { "en": "MongoDB’s maximum BSON document size is 16MB by default.", "vi": "Kích thước tối đa một document BSON là 16MB mặc định." } },
    { "id": 55, "question": "Which driver setting controls connection pool size?", "options": [ { "label": "A", "text": "maxPoolSize" }, { "label": "B", "text": "poolSize" }, { "label": "C", "text": "connections" }, { "label": "D", "text": "maxConnections" } ], "answer": "A", "explanation": { "en": "`maxPoolSize` sets the maximum number of connections in the pool.", "vi": "`maxPoolSize` đặt số kết nối tối đa trong pool." } },
    { "id": 56, "question": "Which command views current operations?", "options": [ { "label": "A", "text": "db.currentOp()" }, { "label": "B", "text": "db.operations()" }, { "label": "C", "text": "mongotop" }, { "label": "D", "text": "mongo top" } ], "answer": "A", "explanation": { "en": "`db.currentOp()` shows current database operations.", "vi": "`db.currentOp()` hiển thị thao tác đang diễn ra." } },
    { "id": 57, "question": "Which method streams changes from a collection?", "options": [ { "label": "A", "text": "watch()" }, { "label": "B", "text": "streamChanges()" }, { "label": "C", "text": "changeStream()" }, { "label": "D", "text": "listen()" } ], "answer": "A", "explanation": { "en": "`collection.watch()` creates a change stream cursor.", "vi": "`collection.watch()` tạo cursor change stream." } },
    { "id": 58, "question": "Which exception handles duplicate key errors?", "options": [ { "label": "A", "text": "DuplicateKeyError" }, { "label": "B", "text": "WriteError" }, { "label": "C", "text": "BulkWriteError" }, { "label": "D", "text": "KeyError" } ], "answer": "A", "explanation": { "en": "`DuplicateKeyError` is raised on duplicate key violations.", "vi": "`DuplicateKeyError` được ném khi vi phạm khóa trùng lặp." } },
    { "id": 59, "question": "Which index supports text stemmers and tokenization?", "options": [ { "label": "A", "text": "Text index" }, { "label": "B", "text": "Wildcard index" }, { "label": "C", "text": "Hashed index" }, { "label": "D", "text": "Sorted index" } ], "answer": "A", "explanation": { "en": "Text indexes support language-specific stemmers and tokenization.", "vi": "Text index hỗ trợ stemmer và phân tích câu theo ngôn ngữ." } },
    { "id": 60, "question": "Which stage in aggregation adds new fields?", "options": [ { "label": "A", "text": "$project" }, { "label": "B", "text": "$addFields" }, { "label": "C", "text": "$set" }, { "label": "D", "text": "Both B and C" } ], "answer": "D", "explanation": { "en": "`$addFields` and its alias `$set` both add new fields in aggregation.", "vi": "`$addFields` và alias `$set` đều thêm trường mới trong aggregation." } },
    { "id": 61, "question": "Which shell helper displays current database stats?", "options": [ { "label": "A", "text": "db.stats()" }, { "label": "B", "text": "db.serverStatus()" }, { "label": "C", "text": "db.stats().collections" }, { "label": "D", "text": "show stats" } ], "answer": "A", "explanation": { "en": "`db.stats()` returns statistics about the current database." } },
    { "id": 62, "question": "How do you list all collections in a database using PyMongo?", "options": [ { "label": "A", "text": "db.list_collection_names()" }, { "label": "B", "text": "db.collection_names()" }, { "label": "C", "text": "db.get_collection_names()" }, { "label": "D", "text": "show collections" } ], "answer": "A", "explanation": { "en": "Use `db.list_collection_names()` to list all collections in the database.", "vi": "Dùng `db.list_collection_names()` để liệt kê tất cả collection trong cơ sở dữ liệu." } },
    { "id": 63, "question": "Which method drops an entire database in PyMongo?", "options": [ { "label": "A", "text": "client.drop_collection()" }, { "label": "B", "text": "client.remove_database()" }, { "label": "C", "text": "client.drop_database()" }, { "label": "D", "text": "db.drop()" } ], "answer": "C", "explanation": { "en": "`client.drop_database()` drops the specified database.", "vi": "`client.drop_database()` xóa cơ sở dữ liệu được chỉ định." } },
    { "id": 64, "question": "Which aggregation stage performs a left outer join with another collection?", "options": [ { "label": "A", "text": "$merge" }, { "label": "B", "text": "$lookup" }, { "label": "C", "text": "$graphLookup" }, { "label": "D", "text": "$join" } ], "answer": "B", "explanation": { "en": "The `$lookup` stage performs a left outer join to another collection.", "vi": "Giai đoạn `$lookup` thực hiện phép nối left outer với collection khác." } },
    { "id": 65, "question": "How do you execute a map-reduce operation using PyMongo?", "options": [ { "label": "A", "text": "collection.map_reduce()" }, { "label": "B", "text": "collection.reduce_map()" }, { "label": "C", "text": "db.mapReduce()" }, { "label": "D", "text": "collection.aggregate()" } ], "answer": "A", "explanation": { "en": "Use `collection.map_reduce()` to run map-reduce jobs in PyMongo.", "vi": "Dùng `collection.map_reduce()` để thực thi map-reduce trong PyMongo." } },
    { "id": 66, "question": "Which parameter enables writing temporary files to disk for large aggregations?", "options": [ { "label": "A", "text": "allowDiskUse=true" }, { "label": "B", "text": "useDisk=true" }, { "label": "C", "text": "disk=true" }, { "label": "D", "text": "tempDisk=true" } ], "answer": "A", "explanation": { "en": "Pass `allowDiskUse=true` to allow aggregation to use disk for large data sets.", "vi": "Truyền `allowDiskUse=true` để cho phép aggregation sử dụng đĩa cho tập dữ liệu lớn." } },
    { "id": 67, "question": "Which connection string option enables retryable writes in MongoDB?", "options": [ { "label": "A", "text": "retryWrites=true" }, { "label": "B", "text": "w=majority" }, { "label": "C", "text": "retry=true" }, { "label": "D", "text": "autoRetry=true" } ], "answer": "A", "explanation": { "en": "`retryWrites=true` enables automatic retry of certain write operations.", "vi": "`retryWrites=true` kích hoạt tự động retry các thao tác ghi cụ thể." } },
    { "id": 68, "question": "Which aggregation stage adds computed fields to documents?", "options": [ { "label": "A", "text": "$project" }, { "label": "B", "text": "$addFields" }, { "label": "C", "text": "$set" }, { "label": "D", "text": "Both B and C" } ], "answer": "D", "explanation": { "en": "Both `$addFields` and its alias `$set` add computed fields in aggregation.", "vi": "Cả `$addFields` và alias `$set` đều thêm trường tính toán trong aggregation." } },
    { "id": 69, "question": "How do you open a change stream on an entire database using PyMongo?", "options": [ { "label": "A", "text": "db.watch()" }, { "label": "B", "text": "client.watch()" }, { "label": "C", "text": "database.watch()" }, { "label": "D", "text": "collection.watch()" } ], "answer": "C", "explanation": { "en": "Use `database.watch()` to stream changes on all collections of a database.", "vi": "Dùng `database.watch()` để theo dõi thay đổi trên tất cả collection của database." } },
    { "id": 70, "question": "Which write concern option ensures acknowledgment from a majority of replica set members?", "options": [ { "label": "A", "text": "w:1" }, { "label": "B", "text": "w:majority" }, { "label": "C", "text": "w:all" }, { "label": "D", "text": "w:0" } ], "answer": "B", "explanation": { "en": "Setting `w=majority` ensures the write is acknowledged by a majority of replica set members.", "vi": "Thiết lập `w=majority` đảm bảo ghi được xác nhận bởi đa số thành viên replica set." } }
  ]
  